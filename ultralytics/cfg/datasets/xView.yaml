# Ultralytics YOLO üöÄ, AGPL-3.0 license
# DIUx xView 2018 Challenge https://challenge.xviewdataset.org by U.S. National Geospatial-Intelligence Agency (NGA)
# --------  DOWNLOAD DATA MANUALLY and jar xf val_images.zip to 'datasets/xView' before running train command!  --------
# Documentation: https://docs.ultralytics.com/datasets/detect/xview/
# Example usage: yolo train data=xView.yaml
# parent
# ‚îú‚îÄ‚îÄ ultralytics
# ‚îî‚îÄ‚îÄ datasets
#     ‚îî‚îÄ‚îÄ xView  ‚Üê downloads here (20.7 GB)

# Train/val/test sets as 1) dir: path/to/imgs, 2) file: path/to/imgs.txt, or 3) list: [path/to/imgs1, path/to/imgs2, ..]
path: ../datasets/xView # dataset root dir
train: images/autosplit_train.txt # train images (relative to 'path') 90% of 847 train images
val: images/autosplit_val.txt # train images (relative to 'path') 10% of 847 train images

# Classes
names:
  0: Fixed-wing Aircraft
  1: Small Aircraft
  2: Cargo Plane
  3: Helicopter
  4: Passenger Vehicle
  5: Small Car
  6: Bus
  7: Pickup Truck
  8: Utility Truck
  9: Truck
  10: Cargo Truck
  11: Truck w/Box
  12: Truck Tractor
  13: Trailer
  14: Truck w/Flatbed
  15: Truck w/Liquid
  16: Crane Truck
  17: Railway Vehicle
  18: Passenger Car
  19: Cargo Car
  20: Flat Car
  21: Tank car
  22: Locomotive
  23: Maritime Vessel
  24: Motorboat
  25: Sailboat
  26: Tugboat
  27: Barge
  28: Fishing Vessel
  29: Ferry
  30: Yacht
  31: Container Ship
  32: Oil Tanker
  33: Engineering Vehicle
  34: Tower crane
  35: Container Crane
  36: Reach Stacker
  37: Straddle Carrier
  38: Mobile Crane
  39: Dump Truck
  40: Haul Truck
  41: Scraper/Tractor
  42: Front loader/Bulldozer
  43: Excavator
  44: Cement Mixer
  45: Ground Grader
  46: Hut/Tent
  47: Shed
  48: Building
  49: Aircraft Hangar
  50: Damaged Building
  51: Facility
  52: Construction Site
  53: Vehicle Lot
  54: Helipad
  55: Storage Tank
  56: Shipping container lot
  57: Shipping Container
  58: Pylon
  59: Tower

# Download script/URL (optional) ---------------------------------------------------------------------------------------
download: |
  import json
  import os
  from pathlib import Path

  import numpy as np
  from PIL import Image
  from tqdm import tqdm

  from ultralytics.data.utils import autosplit, process_xview_feature
  from ultralytics.utils.ops import xyxy2xywhn

  def convert_labels(fname=Path('xView/xView_train.geojson')):
      # Convert xView geoJSON labels to YOLO format
      path = fname.parent
      with open(fname) as f:
          print(f'Loading {fname}...')
          data = json.load(f)

      # Make dirs
      labels = Path(path / 'labels' / 'train')
      os.system(f'rm -rf {labels}')
      labels.mkdir(parents=True, exist_ok=True)

      # xView classes 11-94 to 0-59
      # labels mapped to -1 are ignored
      xview_class2index = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, -1, 3, -1, 4, 5, 6, 7, 8, -1, 9, 10, 11,
                          12, 13, 14, 15, -1, -1, 16, 17, 18, 19, 20, 21, 22, -1, 23, 24, 25, -1, 26, 27, -1, 28, -1,
                          29, 30, 31, 32, 33, 34, 35, 36, 37, -1, 38, 39, 40, 41, 42, 43, 44, 45, -1, -1, -1, -1, 46,
                          47, 48, 49, -1, 50, 51, -1, 52, -1, -1, -1, 53, 54, -1, 55, -1, -1, 56, -1, 57, -1, 58, 59]

      shapes = {}

      # Use ProcessPoolExecutor to parallelize the processing of the features
      import multiprocessing
      pool = multiprocessing.Pool()
      args = [(feature, path, xview_class2index, shapes, xyxy2xywhn, labels) for feature in data['features']]
      mapped_values = list(tqdm(pool.imap_unordered(process_xview_feature, args,chunksize=300), total=len(args)))

  # Check links manually from https://challenge.xviewdataset.org, need account!
  dir = Path(yaml['path'])  # dataset root dir
  urls = ['https://d307kc0mrhucc3.cloudfront.net/train_labels.tgz?Expires=1708456709&Signature=m7DVDg3V-eNlKJdavLw3Vnvft2cWlijfwT~EmGqCO9nIWSNm8M433WvoKfIWPy23ctFnrog7GbLblxCNvak4NxD9pNAVbhRIgfgGpaL9032zNF66hAPb6SchBvAkHHDfjwPjvHQQswZiMIYL8643-00f68RTZUzoX2n3cBPXoYPavhVYxhWoMTzcunDFhsCAOmRMLqfaXpwbvuxe7ndjCplYCBM9T4Mn0jbgFDZdXj7Tl7k0X988vZEx4dc-qfoIid-SKJLJW8EFHGkj5iNL3T5noaD5pPhTInmf3ieZlMjntp6jRFRcl3DuY2IUO2UVgzg9~RmvRuAFhaHBb9Q69A__&Key-Pair-Id=APKAIKGDJB5C3XUL2DXQ',  # train labels
          'https://d307kc0mrhucc3.cloudfront.net/train_images.tgz?Expires=1708456709&Signature=O1itwE458-1YE8sJ7~8qP6K0wbIWjxU4IjqHJ0SEAgJz-s2wQUO-xD6PXeQUNc~TYPyu7~ZHQLJm2VLdx1lqShgfKCflIXzzsDK3vd~G3E7TaDUiJ7tvxwwX8r1Wolg0Q2e~f2BaVWlGPngcvUWZixqyQ0mOxpWY6K59Ll4BQZpcHtGhGTQBHYqS1HSN9uLz3OXvTvehI3nNFKWWWn4X5pgABDtrTCWpDmF3DZrIcPwT~EDMuHgQtYsZe0glnWNw9dSPtwoiF7EI2PTYQU5eHEjMOrRR7OfhB6qqo0hrV8gNCmBOSj9gAa8yBrXie07T-NOrN1uPWZH7x1VsFAdhNg__&Key-Pair-Id=APKAIKGDJB5C3XUL2DXQ',  # 15G, 847 train images
          'https://d307kc0mrhucc3.cloudfront.net/val_images.tgz?Expires=1708462101&Signature=i2iZ-XNfbZTj48XfigOvacU~3lFYWEnN7VR4KNeqDBm4HU5HRWWGlkoKs7YMy3trLnXNfL5ItUJWGmldehJjk2tIQidZqT~-TFCyxb8MsdRT3mcI58FGZxlvJnkU40-giq~ZZQzXqLFtDfu3BeMkg0Wq5OMRt18-sVlQUMiAb27r6kFqBJV9yxBW~H8xMyU4qnkaRoqsxz1tM9YGgA0OpDbLSB-550Ag8Ue6CaAMUrCPIejOCWm06AgK6PBkQ27lb9PqOeiRvcCyJN6YSSYn6iSgYmvzBwKF0mvJOPqB3vh8bl2ceIiw-xcJ5~KK~AC2qRh3z0ManG1oclquxoD9jg__&Key-Pair-Id=APKAIKGDJB5C3XUL2DXQ']  # 5G, 282 val images (no labels)
  
  sha1sums = ['693abfe34beabcb1bb87242241e0d0e273c36f0c', # train labels
              '1cdd5af68ec3a696f696104efb4730928cde524e', # train images
              '1e030f1b2b35cdb8deb408a6d227a6713c32f7ba'] # val images

  from ultralytics.utils.downloads import safe_download
  for url, filesha1sum in zip(urls,sha1sums):
    safe_download(url, dir=dir, sha1sum=filesha1sum)

  # Convert labels
  convert_labels(dir / 'xView_train.geojson')

  # Move images
  images = Path(dir / 'images')
  images.mkdir(parents=True, exist_ok=True)
  Path(dir / 'train_images').rename(dir / 'images' / 'train')
  Path(dir / 'val_images').rename(dir / 'images' / 'val')

  # Split
  autosplit(dir / 'images' / 'train')
