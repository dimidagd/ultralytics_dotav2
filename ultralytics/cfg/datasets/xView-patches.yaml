# Ultralytics YOLO üöÄ, AGPL-3.0 license
# DIUx xView 2018 Challenge https://challenge.xviewdataset.org by U.S. National Geospatial-Intelligence Agency (NGA)
# --------  DOWNLOAD DATA MANUALLY and jar xf val_images.zip to 'datasets/xView' before running train command!  --------
# Documentation: https://docs.ultralytics.com/datasets/detect/xview/
# Example usage: yolo train data=xView.yaml
# parent
# ‚îú‚îÄ‚îÄ ultralytics
# ‚îî‚îÄ‚îÄ datasets
#     ‚îî‚îÄ‚îÄ xView  ‚Üê downloads here (20.7 GB)

# Train/val/test sets as 1) dir: path/to/imgs, 2) file: path/to/imgs.txt, or 3) list: [path/to/imgs1, path/to/imgs2, ..]
path: ../datasets/xView-patches # dataset root dir
train: images/train # train images (relative to 'path') 90% of 847 train images
val: images/val # train images (relative to 'path') 10% of 847 train images
url: https://github.com/dimidagd/ultralytics_dotav2/releases/download/xView/
# Classes
names:
  0: Fixed-wing Aircraft
  1: Small Aircraft
  2: Cargo Plane
  3: Helicopter
  4: Passenger Vehicle
  5: Small Car
  6: Bus
  7: Pickup Truck
  8: Utility Truck
  9: Truck
  10: Cargo Truck
  11: Truck w/Box
  12: Truck Tractor
  13: Trailer
  14: Truck w/Flatbed
  15: Truck w/Liquid
  16: Crane Truck
  17: Railway Vehicle
  18: Passenger Car
  19: Cargo Car
  20: Flat Car
  21: Tank car
  22: Locomotive
  23: Maritime Vessel
  24: Motorboat
  25: Sailboat
  26: Tugboat
  27: Barge
  28: Fishing Vessel
  29: Ferry
  30: Yacht
  31: Container Ship
  32: Oil Tanker
  33: Engineering Vehicle
  34: Tower crane
  35: Container Crane
  36: Reach Stacker
  37: Straddle Carrier
  38: Mobile Crane
  39: Dump Truck
  40: Haul Truck
  41: Scraper/Tractor
  42: Front loader/Bulldozer
  43: Excavator
  44: Cement Mixer
  45: Ground Grader
  46: Hut/Tent
  47: Shed
  48: Building
  49: Aircraft Hangar
  50: Damaged Building
  51: Facility
  52: Construction Site
  53: Vehicle Lot
  54: Helipad
  55: Storage Tank
  56: Shipping container lot
  57: Shipping Container
  58: Pylon
  59: Tower

# Download script/URL (optional) ---------------------------------------------------------------------------------------
download: |
  import json
  import os
  from pathlib import Path

  import numpy as np
  from PIL import Image
  from tqdm import tqdm

  from ultralytics.data.utils import autosplit, process_xview_feature
  from ultralytics.utils.ops import xyxy2xywhn
  from ultralytics.data.split_xview import transform_yolo_dota_to_obb
  from ultralytics.data.split_dota import split_trainval, split_test
  from ultralytics.utils.downloads import safe_download
  from PIL import Image
  import shutil
  Image.MAX_IMAGE_PIXELS = None # There is a security issue related to this.

  final_dir = Path(yaml['path'])
  dir =  '/tmp' / Path('xView')
  if True:
    def convert_labels(fname=Path('xView/xView_train.geojson')):
        # Convert xView geoJSON labels to YOLO format
        path = fname.parent
        with open(fname) as f:
            print(f'Loading {fname}...')
            data = json.load(f)

        # Make dirs
        labels = Path(path / 'labels' / 'train')
        os.system(f'rm -rf {labels}')
        labels.mkdir(parents=True, exist_ok=True)

        # xView classes 11-94 to 0-59
        # labels mapped to -1 are ignored
        xview_class2index = [-1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 0, 1, 2, -1, 3, -1, 4, 5, 6, 7, 8, -1, 9, 10, 11,
                            12, 13, 14, 15, -1, -1, 16, 17, 18, 19, 20, 21, 22, -1, 23, 24, 25, -1, 26, 27, -1, 28, -1,
                            29, 30, 31, 32, 33, 34, 35, 36, 37, -1, 38, 39, 40, 41, 42, 43, 44, 45, -1, -1, -1, -1, 46,
                            47, 48, 49, -1, 50, 51, -1, 52, -1, -1, -1, 53, 54, -1, 55, -1, -1, 56, -1, 57, -1, 58, 59]

        shapes = {}

        # Use ProcessPoolExecutor to parallelize the processing of the features
        import multiprocessing
        pool = multiprocessing.Pool()
        args = [(feature, path, xview_class2index, shapes, xyxy2xywhn, labels) for feature in data['features']]
        mapped_values = list(tqdm(pool.imap_unordered(process_xview_feature, args,chunksize=300), total=len(args)))
        pool.close()

    # Check links manually from https://challenge.xviewdataset.org, need account!

    #urls = ['https://d307kc0mrhucc3.cloudfront.net/train_labels.tgz?Expires=1708630448&Signature=MjRnSbRplJyepzt1iYuW6E-cg0YCv4CpmylSF10u-4ne1dZry2Nx0ov9taF1eXJSEcFJJ5LjG4GXfby~FSAluWnV8BTU6iHnzuR45N3LJYckP41R9wJdDjHriE~PX-Gu~EsMlIkA02eZONM4Bn3bIoP5PPfRD1X5XgSlQm1mGqnJc7nzFXQ-36h9W4tOCA~p7l-MuWS0seHWjdmnZmte9LlBdxk8-770YxvrzazsIW4gkrw1PM2eTNkf-l7ReERaTghlfwkBUwhIFMzmhUppTHeWN5nEw0bnfyp76VJzX9Gm7-syRlEO17ZS3yUmfZq12bk6OMY3-HZBS6ypACeWdQ__&Key-Pair-Id=APKAIKGDJB5C3XUL2DXQ',  # train labels
    #        'https://d307kc0mrhucc3.cloudfront.net/train_images.tgz?Expires=1708630448&Signature=LXOayGhpT~vubUvP2xniCyV8wW-fEOKfulktLm3uGrHTRhRBzul6Ivk19aeFFY58a5DrP5XsfZAaA~-mao9zfXktITkS4xQZZU4C8NU5u2FMcDdnXwvO1Q~gs27L7RJyrUFd~zeetlS7Y7OsQCBSTChaeVRoQ5HQ6DrsvRPAOJNSYoLDcc-8irNKkzZrkvpmwvVurIc~pqrQ4qRqbv40Mi2LsydGKT~A10armLEZpzRlKOjrYvIMA0blnrBjeMOP6bCW2AE69EEnsKYcnrrWI0KX6WxZi9m8fi-GyMGUjTcoAEETdbvMZPbzT7Z18xXzmmzSrJ~gaJ4jouIBCbL7iQ__&Key-Pair-Id=APKAIKGDJB5C3XUL2DXQ',  # 15G, 847 train images
    #        'https://d307kc0mrhucc3.cloudfront.net/val_images.tgz?Expires=1708630448&Signature=pNYkRRI4RKQkPVBnU-ZP-r1jJqXW8ckp~ebNBXw~mMlda6pXvwDKvJlF6tMD7hZnmQ242zy7Zru4~6RTCwf-kA8Z9xRsk9KYvQw-l9-lx~dMVpcs0jrGCuMpuJuyx-s~wkqAUvJ6bw7nDTwqAzVMKnp6AiMmT0y~maBWtnEPxkejSOmeQQYJFNl8Qwj5j-In0SnPILJWsVcKyKrrmjSFuVKp8g~ips~2JHUinm5GKPBWsaGKQi5vtP9b65vqtbnaz1i0mSBddnApbQu5PSgroGhfZbRnfxCbsbuZXCxEeokwUWF5nzrs7VxF49EDoVwz66yXAx8tG3MvFWwMw4CT9A__&Key-Pair-Id=APKAIKGDJB5C3XUL2DXQ']  # 5G, 282 val images (no labels)

    #sha1sums = ['693abfe34beabcb1bb87242241e0d0e273c36f0c', # train labels
    #            '1cdd5af68ec3a696f696104efb4730928cde524e', # train images
    #            '1e030f1b2b35cdb8deb408a6d227a6713c32f7ba'] # val images


    #for url, filesha1sum in zip(urls,sha1sums):
    #  safe_download(url, dir=dir, sha1sum=filesha1sum)

    import subprocess
    # Execute download_xView.sh script with arguments url, save dir, name of dataset
    subprocess.run(['bash', './ultralytics/data/scripts/download_xView.sh', yaml['url'], dir, 'xView'])

    print("Downloaded/unarchived xView data")
    # Convert labels
    print("Converting labels")
    convert_labels(dir / 'xView_train.geojson')
    print("Finished converting labels")
    print("Moving images")
    # Move images
    images = Path(dir / 'images')
    images.mkdir(parents=True, exist_ok=True)
    # Remove existing directories with shutil and rename existing directories
    import shutil
    # Remove existing train folder even if it does not exist
    print("Removing existing train, val, test folders")
    os.system('rm -rf ' + str(dir / 'images' / 'train'))
    os.system('rm -rf ' + str(dir / 'images' / 'val'))
    os.system('rm -rf ' + str(dir / 'images' / 'test'))
    # Rename xView train_images to train
    Path(dir / 'train_images').rename(dir / 'images' / 'train')
    # Rename xView val_images to test
    Path(dir / 'val_images').rename(dir / 'images' / 'test')
    # Create val folder
    Path(dir / 'images'/ 'val').mkdir(parents=True, exist_ok=True)
    Path(dir / 'labels' / 'val').mkdir(parents=True, exist_ok=True)
    Path(dir / 'images'/ 'train').mkdir(parents=True, exist_ok=True)
    Path(dir / 'labels' / 'train').mkdir(parents=True, exist_ok=True)

    # Split train data into train,val splits since in xView val data have no labels
    print("Split train data into train,val splits")
    autosplit(dir / 'images' / 'train')

    # Move images and labels to train, val folders.
    for split in ['train', 'val']:
      with open(dir / 'images' / f'autosplit_{split}.txt') as f:
          for line in f:
              fp = Path(line.strip())
              image_path = dir / 'images' / fp
              final_image_path = dir / 'images' / split / fp.name
              final_label_path = dir / 'labels' / split / fp.with_suffix('.txt').name
              label = Path(dir / 'labels' / fp.with_suffix('.txt'))
              if image_path.exists():
                Path(image_path).rename(final_image_path)
              if label.exists():
                label.rename(final_label_path)


    print("Finished moving images")

    print("Converting to OBB by modifying labels")

    anns = transform_yolo_dota_to_obb(yolo_dota_path=dir, output_dir=dir, splits=['val','train'])
    print("Finished converting to OBB, now you can split into patches")

    print("Will now split into patches")

    # split train and val set, with labels.

    print(f"Removing {final_dir}")
    shutil.rmtree(final_dir, ignore_errors=True)
    final_dir.mkdir(parents=True, exist_ok=True)
    print(f"Creating patched dataset in {final_dir}")
    split_trainval(
        data_root=dir,
        save_dir=final_dir,
        rates=[0.5, 1.0, 1.5],    # multi-scaleP
        gap=500
    )

    # Split also test set, without labels.
    split_test(
        data_root=dir,
        save_dir=final_dir,
        rates=[0.5, 1.0, 1.5],    # multi-scale
        gap=500
    )


    # Transform back to YOLO det format
    anns = transform_yolo_dota_to_obb(yolo_dota_path=final_dir, output_dir=final_dir, splits=['val','train'], inverse=True)
